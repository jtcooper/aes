from typing import List
from cipher import subBytes
from globals import Nb
from util import int_to_bytes, bytes_to_int

Rcon = [0x00000000,
        0x01000000, 0x02000000, 0x04000000, 0x08000000,
        0x10000000, 0x20000000, 0x40000000, 0x80000000,
        0x1B000000, 0x36000000, 0x6C000000, 0xD8000000,
        0xAB000000, 0x4D000000, 0x9A000000, 0x2F000000,
        0x5E000000, 0xBC000000, 0x63000000, 0xC6000000,
        0x97000000, 0x35000000, 0x6A000000, 0xD4000000,
        0xB3000000, 0x7D000000, 0xFA000000, 0xEF000000,
        0xC5000000, 0x91000000, 0x39000000, 0x72000000,
        0xE4000000, 0xD3000000, 0xBD000000, 0x61000000,
        0xC2000000, 0x9F000000, 0x25000000, 0x4A000000,
        0x94000000, 0x33000000, 0x66000000, 0xCC000000,
        0x83000000, 0x1D000000, 0x3A000000, 0x74000000,
        0xE8000000, 0xCB000000, 0x8D000000]


def subWord(b: bytearray) -> bytearray:
    b2 = b.copy()
    subBytes(b2)
    return b2


def rotWord(b: bytearray) -> bytearray:
    r = b.copy()
    r.append(r[0])
    return r[1:]


def key_expansion(key: bytearray, word: List[bytearray], nk: int, nr: int):
    i = 0
    while i < nk:
        word[i] = bytearray([key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]])
        i = i + 1

    i = nk
    while i < Nb * (nr + 1):
        temp = word[i - 1]
        if i % nk == 0:
            temp = bytes_to_int(subWord(rotWord(temp))) ^ \
                   Rcon[int(i / nk)]
            temp = int_to_bytes(temp)
        elif nk > 6 and i % nk == 4:
            temp = subWord(temp)
        word[i] = int_to_bytes(bytes_to_int(word[i - nk]) ^ bytes_to_int(temp))
        i = i + 1


# key_expansion test (128 bits)
key = bytearray([0x2b, 0x7e, 0x15, 0x16,
                 0x28, 0xae, 0xd2, 0xa6,
                 0xab, 0xf7, 0x15, 0x88,
                 0x09, 0xcf, 0x4f, 0x3c])
expected = [bytearray([0x2b, 0x7e, 0x15, 0x16]),
            bytearray([0x28, 0xae, 0xd2, 0xa6]),
            bytearray([0xab, 0xf7, 0x15, 0x88]),
            bytearray([0x09, 0xcf, 0x4f, 0x3c]),
            bytearray([0xa0, 0xfa, 0xfe, 0x17]),
            bytearray([0x88, 0x54, 0x2c, 0xb1]),
            bytearray([0x23, 0xa3, 0x39, 0x39]),
            bytearray([0x2a, 0x6c, 0x76, 0x05]),
            bytearray([0xf2, 0xc2, 0x95, 0xf2]),
            bytearray([0x7a, 0x96, 0xb9, 0x43]),
            bytearray([0x59, 0x35, 0x80, 0x7a])]
# expected list goes on, but I don't want to type it all out
Nk = 4
Nr = 10
w = [None] * (Nb * (Nr + 1))
key_expansion(key, w, Nk, Nr)
for i, _ in enumerate(expected):
    assert w[i] == expected[i]
# print_bytes(w[43])
assert w[43] == bytearray([0xb6, 0x63, 0x0c, 0xa6])

# 192-bit key expansion test
Nk = 6
Nr = 12
key = bytearray([0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e,
                 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b,
                 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8,
                 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b])
expected = [bytearray([0x8e, 0x73, 0xb0, 0xf7]),
            bytearray([0xda, 0x0e, 0x64, 0x52]),
            bytearray([0xc8, 0x10, 0xf3, 0x2b]),
            bytearray([0x80, 0x90, 0x79, 0xe5]),
            bytearray([0x62, 0xf8, 0xea, 0xd2]),
            bytearray([0x52, 0x2c, 0x6b, 0x7b]),
            bytearray([0xfe, 0x0c, 0x91, 0xf7]),
            bytearray([0x24, 0x02, 0xf5, 0xa5]),
            bytearray([0xec, 0x12, 0x06, 0x8e]),
            bytearray([0x6c, 0x82, 0x7f, 0x6b]),
            bytearray([0x0e, 0x7a, 0x95, 0xb9]),
            bytearray([0x5c, 0x56, 0xfe, 0xc2]),
            bytearray([0x4d, 0xb7, 0xb4, 0xbd]),
            bytearray([0x69, 0xb5, 0x41, 0x18])]
w = [None] * (Nb * (Nr + 1))
key_expansion(key, w, Nk, Nr)
for i, _ in enumerate(expected):
    assert w[i] == expected[i]
# print_bytes(w[51])
assert w[51] == bytearray([0x01, 0x00, 0x22, 0x02])

# 256-bit key expansion test
Nk = 8
Nr = 14
key = bytearray([0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
                 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
                 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4])
w = [None] * (Nb * (Nr + 1))
key_expansion(key, w, Nk, Nr)
assert w[59] == bytearray([0x70, 0x6c, 0x63, 0x1e])
